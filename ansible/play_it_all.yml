---
- name: Men&Mice test play
  hosts: localhost
  connection: local
  become: false

  vars:
    network: nononet

  tasks:
    - name: Ansible information
      debug:
        msg:
          - "Ansible version   : {{ ansible_version.full }}"
          - "Python version    : {{ ansible_facts['python_version'] }}"
          - "Python executable : {{ ansible_facts['python']['executable'] }}"

    - name: define custom properties for this network range
      mm_props:
        name: location
        state: present
        proptype: text
        dest: ipaddress
        provider: "{{ provider }}"

    - name: Set free IP addresses as a fact
      set_fact:
        freeips: "{{ query('mm_freeip', provider, network, claim=60, excludedhcp=True) }}"

    - name: Get the free IP address and show info
      debug:
        msg:
          - "Free IPs           : {{ freeips }}"
          - "Queried network(s) : {{ network }}"

    # Make a DHCP reservation for this address
    # So claim it after DNS setting.
    - name: Reservation on IP address
      mm_dhcp:
        state: present
        name: testhost
        ipaddress: "{{ freeips }}"
        macaddress: "de:ad:be:ef:16:10"
        provider: "{{ provider }}"
      delegate_to: localhost

    - name: Set properties on IP
      mm_ipprops:
        state: present
        ipaddress: "{{ freeips }}"
        properties:
          claimed: false
          location: London
        provider: "{{ provider }}"
      delegate_to: localhost

    # The `mm_freeip` plugin always returns a list, but the request was for just 1
    # IP address. The `mm_dnsrecord` only needs a single IP address. That's why the
    # list-slice `[0]` is used.
    - name: Set a DNS record for the claimed IP
      mm_dnsrecord:
        dnszone: testzone
        name: testhost
        data: "{{ freeips[0] }}"
        provider: "{{ provider }}"
      delegate_to: localhost

    - name: Set a PTR DNS record for the claimed IP
      mm_dnsrecord:
        dnszone: testzone
        name: testhost
        data: "{{ freeips[0] }}"
        rrtype: PTR
        provider: "{{ provider }}"
      delegate_to: localhost

    - name: Get all info for this IP address
      debug:
        var: freeipinfo
      vars:
        freeipinfo: "{{ query('mm_ipinfo', provider, freeips[0]) | to_nice_json }}"

    - name: Renew properties on IP
      mm_ipprops:
        state: present
        ipaddress: "{{ freeips }}"
        properties:
          claimed: false
          location: Madrid
        provider: "{{ provider }}"
      delegate_to: localhost

    - name: Get all info for this IP address
      debug:
        var: freeipinfo
      vars:
        freeipinfo: "{{ query('mm_ipinfo', provider, freeips[0]) | to_nice_json }}"

    - name: Remove properties off IP
      mm_ipprops:
        state: present
        ipaddress: "{{ freeips }}"
        deleteunspecified: true
        properties:
          claimed: false
        provider: "{{ provider }}"
      delegate_to: localhost

    - name: Get all info for this IP address
      debug:
        var: freeipinfo
      vars:
        freeipinfo: "{{ query('mm_ipinfo', provider, freeips[0]) | to_nice_json }}"

    - name: Remove reservation on IP address
      mm_dhcp:
        state: absent
        name: testhost
        ipaddress: "{{ freeips }}"
        macaddress: "de:ad:be:ef:16:10"
        provider: "{{ provider }}"
      delegate_to: localhost

    - name: Get all info for this IP address
      debug:
        var: freeipinfo
      vars:
        freeipinfo: "{{ query('mm_ipinfo', provider, freeips[0]) | to_nice_json }}"

    - name: Remove DNS record for the claimed IP
      mm_dnsrecord:
        state: absent
        dnszone: testzone
        name: testhost
        data: "{{ freeips[0] }}"
        provider: "{{ provider }}"
      delegate_to: localhost

    - name: Get all info for this IP address
      debug:
        var: freeipinfo
      vars:
        freeipinfo: "{{ query('mm_ipinfo', provider, freeips[0]) | to_nice_json }}"

